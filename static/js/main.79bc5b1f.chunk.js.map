{"version":3,"sources":["CircuitSimulation.js","index.js"],"names":["CircuitModel","R","setR","useState","L","setL","E","setE","t","setT","connectData","setConnectData","disconnectData","setDisconnectData","_jsxs","children","_jsx","type","value","onChange","e","target","class","onClick","handleCalculate","calculateData","tData","i","push","Math","exp","Plot","data","mode","x","y","line","color","layout","title","xaxis","yaxis","ReactDOM","render","CircuitSimulation","document","getElementById"],"mappings":"qNA0GeA,MAtGf,WACI,MAAOC,EAAGC,GAAQC,mBAAS,IACpBC,EAAGC,GAAQF,mBAAS,IACpBG,EAAGC,GAAQJ,mBAAS,IACpBK,EAAGC,GAAQN,mBAAS,KACpBO,EAAaC,GAAkBR,mBAAS,KACxCS,EAAgBC,GAAqBV,mBAAS,IAyBrD,OACIW,eAAA,OAAAC,SAAA,CACID,eAAA,OAAAC,SAAA,CACID,eAAA,SAAAC,SAAA,CAAO,oBAEHC,cAAA,SAAOC,KAAK,SAASC,MAAOjB,EAAGkB,SAAWC,GAAMlB,EAAKkB,EAAEC,OAAOH,YAElEJ,eAAA,SAAAC,SAAA,CAAO,oBAEHC,cAAA,SAAOC,KAAK,SAASC,MAAOd,EAAGe,SAAWC,GAAMf,EAAKe,EAAEC,OAAOH,YAElEJ,eAAA,SAAAC,SAAA,CAAO,cAEHC,cAAA,SAAOC,KAAK,SAASC,MAAOZ,EAAGa,SAAWC,GAAMb,EAAKa,EAAEC,OAAOH,YAElEF,cAAA,UAAQM,MAAM,wBAAwBC,QAnB1BC,KAnBFC,MAClB,IAAIC,EAAQ,GACRhB,EAAc,GACdE,EAAiB,GAErB,IAAK,IAAIe,EAAI,EAAGA,EAAI,MAChBD,EAAME,KAAKD,GACXjB,EAAYkB,KAAKtB,EAAIL,GAAK,EAAI4B,KAAKC,KAAK7B,EAAIG,EAAIuB,KAChDf,EAAegB,KAAKtB,EAAIL,EAAI4B,KAAKC,KAAK7B,EAAIG,EAAIuB,MAE1CrB,EAAIL,EAAI4B,KAAKC,KAAK7B,EAAIG,EAAIuB,GAAK,OALbA,GAAK,MAS/BlB,EAAKiB,GACLf,EAAeD,GACfG,EAAkBD,EAAe,EAIjCa,EAAe,EAkBwDV,SAAC,oEAEpED,eAAA,OAAAC,SAAA,CACIC,cAAA,MAAAD,SAAI,iJACJC,cAACe,IAAI,CACDC,KAAM,CACF,CACIC,KAAM,QACNhB,KAAM,UACNiB,EAAG1B,EACH2B,EAAGzB,EACH0B,KAAM,CACFC,MAAO,aAInBC,OAAQ,CACJC,MAAO,+IACPC,MAAO,CACHD,MAAO,6CAEXE,MAAO,CACHF,MAAO,sBAKvBzB,eAAA,OAAAC,SAAA,CACIC,cAAA,MAAAD,SAAI,uJACJC,cAACe,IAAI,CACDC,KAAM,CACF,CACIC,KAAM,QACNhB,KAAM,UACNiB,EAAG1B,EACH2B,EAAGvB,EACHwB,KAAM,CACFC,MAAO,aAInBC,OAAQ,CACJC,MAAO,qJACPC,MAAO,CACHD,MAAO,6CAEXE,MAAO,CACHF,MAAO,wBAOnC,ECpGAG,IAASC,OAAO3B,cAAC4B,EAAiB,IAAKC,SAASC,eAAe,Q","file":"static/js/main.79bc5b1f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Plot from 'react-plotly.js';\nimport './CircuitSimulation.css'\n\nfunction CircuitModel() {\n    const [R, setR] = useState(0);\n    const [L, setL] = useState(0);\n    const [E, setE] = useState(0);\n    const [t, setT] = useState([]);\n    const [connectData, setConnectData] = useState([]);\n    const [disconnectData, setDisconnectData] = useState([]);\n\n    const calculateData = () => {\n        let tData = [];\n        let connectData = [];\n        let disconnectData = [];\n\n        for (let i = 0; i < 1000; i += 0.001) {\n            tData.push(i);\n            connectData.push(E / R * (1 - Math.exp(-R / L * i)));\n            disconnectData.push(E / R * Math.exp(-R / L * i));\n\n            if (E / R * Math.exp(-R / L * i) < 0.00001)\n                break;\n        }\n\n        setT(tData);\n        setConnectData(connectData);\n        setDisconnectData(disconnectData);\n    };\n\n    const handleCalculate = () => {\n        calculateData();\n    };\n\n    return (\n        <div>\n            <div>\n                <label>\n                    R (Ом):\n                    <input type=\"number\" value={R} onChange={(e) => setR(e.target.value)} />\n                </label>\n                <label>\n                    L (Гн):\n                    <input type=\"number\" value={L} onChange={(e) => setL(e.target.value)} />\n                </label>\n                <label>\n                    E (В):\n                    <input type=\"number\" value={E} onChange={(e) => setE(e.target.value)} />\n                </label>\n                <button class=\"button button-default\" onClick={handleCalculate}>Рассчитать</button>\n            </div>\n            <div>\n                <h2>График I(t) при замыкании цепи</h2>\n                <Plot\n                    data={[\n                        {\n                            mode: 'lines',\n                            type: 'scatter',\n                            x: t,\n                            y: connectData,\n                            line: {\n                                color: '#a43a76'\n                            }\n                        }\n                    ]}\n                    layout={{\n                        title: 'График I(t) при замыкании цепи',\n                        xaxis: {\n                            title: 'Время t (с)'\n                        },\n                        yaxis: {\n                            title: 'I(t), А'\n                        }\n                    }}\n                />\n            </div>\n            <div>\n                <h2>График I(t) при размыкании цепи</h2>\n                <Plot\n                    data={[\n                        {\n                            mode: 'lines',\n                            type: 'scatter',\n                            x: t,\n                            y: disconnectData,\n                            line: {\n                                color: '#34abc7'\n                            }\n                        }\n                    ]}\n                    layout={{\n                        title: 'График I(t) при размыкании цепи',\n                        xaxis: {\n                            title: 'Время t (с)'\n                        },\n                        yaxis: {\n                            title: 'I(t), А'\n                        }\n                    }}\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default CircuitModel;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CircuitSimulation from './CircuitSimulation';\n\nReactDOM.render(<CircuitSimulation />, document.getElementById('root'));\n"],"sourceRoot":""}